name: entlz-5-platform-rbac

env:
  entlzprefix: entlz
  environment: azureusgovernment
  location: usgovvirginia

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#  push:
#    branches:
#        - dev
#    paths:
#        - 'templates/entlz/rbac/**'
#        - '.github/workflows/entlz-5-platform-rbac.yml'

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        - name: Branch name
          run: echo running on branch ${GITHUB_REF##*/}
        - name: Log in with Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZGOV_CREDS }}
            environment: ${{ env.environment }}
            enable-AzPSSession: false
        
        - name: Create and Assign RBAC Groups in Hierarchy
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |        

              # azure-platform-readers
              # role: reader
              # scope: Root Management Group
              group=$(az ad group list --query "[?displayName=='azure-platform-readers'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have global reader rights to Azure\", 
                                  \"displayName\": \"azure-platform-readers\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"azure-platform-readers\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "azure-platform-readers group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope / --role Reader
              
              # {entlzprefix}-platform-admins
              # role: owner
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ env.entlzprefix}}-platform-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have owner rights at enterprise landing zone root\", 
                                  \"displayName\": \"${{ env.entlzprefix}}-platform-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ env.entlzprefix}}-platform-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ env.entlzprefix}}-platform-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }} --role Owner

              # {entlzprefix}-security-admins
              # role: security admin
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ env.entlzprefix}}-security-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Security Admin rights at enterprise landing zone root and Virtual Machine Contributor rights on security MG\", 
                                  \"displayName\": \"${{ env.entlzprefix}}-security-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ env.entlzprefix}}-security-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ env.entlzprefix}}-security-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }} --role "Security Admin"
              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }}-security --role "Virtual Machine Contributor"

              # {entlzprefix}-network-admins
              # role: Network Contributor
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ env.entlzprefix}}-network-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Network Contributor rights at enterprise landing zone root and Virtual Machine Contributor rights on connectivity MG\", 
                                  \"displayName\": \"${{ env.entlzprefix}}-network-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ env.entlzprefix}}-network-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ env.entlzprefix}}-network-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }} --role "Network Contributor"
              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }}-connectivity --role "Virtual Machine Contributor"

              # {entlzprefix}-cost-admins
              # role: Cost Managment Contributor
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ env.entlzprefix}}-cost-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Cost Management Contributor rights at enterprise landing zone root\", 
                                  \"displayName\": \"${{ env.entlzprefix}}-cost-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ env.entlzprefix}}-cost-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ env.entlzprefix}}-cost-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }} --role "Cost Management Contributor"

              # {entlzprefix}-identity-admins
              # role: Virtual Machine Contributor
              # scope: {entlzprefix}-Identity management group
              group=$(az ad group list --query "[?displayName=='${{ env.entlzprefix}}-identity-admins'].objectId" --output tsv)              
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Virtual Machine Contributor rights at identity MG\", 
                                  \"displayName\": \"${{ env.entlzprefix}}-identity-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ env.entlzprefix}}-identity-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ env.entlzprefix}}-identity-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }}-identity --role "Virtual Machine Contributor"


              # {entlzprefix}-sandbox-owners
              # role: owner
              # scope: {entlzprefix}-Sandboxes management group
              group=$(az ad group list --query "[?displayName=='${{ env.entlzprefix}}-sandbox-owners'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Owner rights at sandbox MG\", 
                                  \"displayName\": \"${{ env.entlzprefix}}-sandbox-owners\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ env.entlzprefix}}-sandbox-owners\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ env.entlzprefix}}-sandbox-owners group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ env.entlzprefix }}-sandboxes --role "Owner"

        - name: Deploy Custom RBAC Definitions
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              entlzprefix=${{ env.entlzprefix }}
              
              # Deploy Custom RBAC Definitions
              for f in $(find templates/entlz/rbac/roles -name role.json); 
                do  \
                    rolename=$(jq -r .Name $f)
                    roleexists=$(az role definition list --query "[?roleName=='$rolename']" --output tsv) 
                    if [[ -z $roleexists ]];
                    then
                      roledefinition=$(jq -r . $f | sed -e "s/%%rbacdefinitionmg%%/$entlzprefix/g")
                      az role definition create --role-definition "$roledefinition"                    
                    else
                      echo "Role definition $rolename already exists...skipping."
                    fi;
              done
              sleep 60

        - name: Deploy RBAC Assignments
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy RBAC Assignments
              for f in $(find templates/entlz/rbac/roles -name assign.*.json);
                do assignee=`jq -r .ObjectId $f`                    
                  role=`jq -r .RoleDefinitionName $f`
                  scope=`jq -r .Scope $f`
                  
                  isGroup=$(az ad group list --query "[?objectId=='$assignee']")
                  isUser=$(az ad user list --query "[?objectId=='$assignee']")
                  isApp=$(az ad app list --query "[?objectId=='$assignee']")

                  if [[ -z $isGroup &&  -z $isUser &&  -z $isApp ]]; 
                    then echo "Object ID $assignee not found in tenant."; 
                    else 
                        az role assignment create \
                        --assignee "$assignee" \
                        --role "$role" \
                        --scope "$scope"
                  fi
                                   
                done
                sleep 120


        