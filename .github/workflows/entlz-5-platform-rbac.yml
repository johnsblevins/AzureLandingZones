name: entlz-5-platform-rbac



# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      entlzprefix: 
        description: 'entlzprefix'
        required: true
        default: ''
      environment: 
        description: 'environment'
        required: true
        default: 'azureusgovernment'
      githubsecret:
        description: 'Github Secret Name with Azure Credentials'
        required: true
        default: 'AZGOV_CREDS'


  
   # Allows you to run this workflow with web call to GitHub Repository Dispatch Event
  # Note: This event will only trigger a workflow run if the workflow file is on the default branch.
  # Sample webhook call:
  #curl \
  #  -X POST \
  #  -H "Accept: application/vnd.github.v3+json" \
  #  -H "Authorization: token replacewithgithubpattoken" \
  #  https://api.github.com/repos/johnsblevins/AzureLandingZones/dispatches \
  #  -d '{ 
  #        "event_type":"entlz-4-platform-policies", 
  #        "client_payload":{
  #          "ref":"dev",
  #          "entlzprefix":"elz2",
  #          "environment":"azureusgovernment",
  #          "githubsecret":"AZGOV_CREDS"
  #        }        
  #      }'
  repository_dispatch:
    types: [entlz-5-platform-rbac]  

#  push:
#    branches:
#        - dev
#    paths:
#        - 'templates/entlz/rbac/**'
#        - '.github/workflows/entlz-5-platform-rbac.yml'

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
        - name: Set Variables
          id: setvariables         
          run: |
            shopt -s nocasematch
            echo ${GITHUB_EVENT_NAME} 
            if [ ${GITHUB_EVENT_NAME} == 'workflow_dispatch' ];
            then
              echo "::set-output name=ref::${GITHUB_REF##*/}"
              echo "::set-output name=entlzprefix::${{ github.event.inputs.entlzprefix }}"
              echo "::set-output name=environment::${{ github.event.inputs.environment }}"
              echo "::set-output name=githubsecret::${{ github.event.inputs.githubsecret }}"
            elif [ ${GITHUB_EVENT_NAME} == 'repository_dispatch' ];
            then
              echo "::set-output name=ref::${{ github.event.client_payload.ref }}"
              echo "::set-output name=entlzprefix::${{ github.event.client_payload.entlzprefix }}"
              echo "::set-output name=environment::${{ github.event.client_payload.environment }}"
              echo "::set-output name=githubsecret::${{ github.event.client_payload.githubsecret }}"
            else
              echo "Invalid Event Trigger ${GITHUB_EVENT_NAME} unable to set variables."
            fi;            
          
        - name: Echo Variables
          run: |
            echo ref: ${{ steps.setvariables.outputs.ref }}
            echo entlzprefix: ${{ steps.setvariables.outputs.entlzprefix }}
            echo environment: ${{ steps.setvariables.outputs.environment }}
            echo githubsecret: ${{ steps.setvariables.outputs.githubsecret }}

        - uses: actions/checkout@v2
          with:
            ref: ${{ steps.setvariables.outputs.ref }}
        - name: Log in with Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets[steps.setvariables.outputs.githubsecret] }}
            environment: ${{ steps.setvariables.outputs.environment }}
            enable-AzPSSession: false
        
        - name: Create and Assign RBAC Groups in Hierarchy
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |        

              # azure-platform-readers
              # role: reader
              # scope: Root Management Group
              group=$(az ad group list --query "[?displayName=='azure-platform-readers'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have global reader rights to Azure\", 
                                  \"displayName\": \"azure-platform-readers\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"azure-platform-readers\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "azure-platform-readers group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope / --role Reader
              
              # {entlzprefix}-platform-admins
              # role: owner
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ steps.setvariables.outputs.entlzprefix }}-platform-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have owner rights at enterprise landing zone root\", 
                                  \"displayName\": \"${{ steps.setvariables.outputs.entlzprefix }}-platform-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ steps.setvariables.outputs.entlzprefix }}-platform-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ steps.setvariables.outputs.entlzprefix }}-platform-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }} --role Owner

              # {entlzprefix}-security-admins
              # role: security admin
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ steps.setvariables.outputs.entlzprefix }}-security-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Security Admin rights at enterprise landing zone root and Virtual Machine Contributor rights on security MG\", 
                                  \"displayName\": \"${{ steps.setvariables.outputs.entlzprefix }}-security-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ steps.setvariables.outputs.entlzprefix }}-security-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ steps.setvariables.outputs.entlzprefix }}-security-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }} --role "Security Admin"
              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }}-security --role "Virtual Machine Contributor"

              # {entlzprefix}-network-admins
              # role: Network Contributor
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ steps.setvariables.outputs.entlzprefix }}-network-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Network Contributor rights at enterprise landing zone root and Virtual Machine Contributor rights on connectivity MG\", 
                                  \"displayName\": \"${{ steps.setvariables.outputs.entlzprefix }}-network-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ steps.setvariables.outputs.entlzprefix }}-network-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ steps.setvariables.outputs.entlzprefix }}-network-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }} --role "Network Contributor"
              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }}-connectivity --role "Virtual Machine Contributor"

              # {entlzprefix}-cost-admins
              # role: Cost Managment Contributor
              # scope: {entlzprefix} management group
              group=$(az ad group list --query "[?displayName=='${{ steps.setvariables.outputs.entlzprefix }}-cost-admins'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Cost Management Contributor rights at enterprise landing zone root\", 
                                  \"displayName\": \"${{ steps.setvariables.outputs.entlzprefix }}-cost-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ steps.setvariables.outputs.entlzprefix }}-cost-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ steps.setvariables.outputs.entlzprefix }}-cost-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }} --role "Cost Management Contributor"

              # {entlzprefix}-identity-admins
              # role: Virtual Machine Contributor
              # scope: {entlzprefix}-Identity management group
              group=$(az ad group list --query "[?displayName=='${{ steps.setvariables.outputs.entlzprefix }}-identity-admins'].objectId" --output tsv)              
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Virtual Machine Contributor rights at identity MG\", 
                                  \"displayName\": \"${{ steps.setvariables.outputs.entlzprefix }}-identity-admins\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ steps.setvariables.outputs.entlzprefix }}-identity-admins\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ steps.setvariables.outputs.entlzprefix }}-identity-admins group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }}-identity --role "Virtual Machine Contributor"


              # {entlzprefix}-sandbox-owners
              # role: owner
              # scope: {entlzprefix}-Sandboxes management group
              group=$(az ad group list --query "[?displayName=='${{ steps.setvariables.outputs.entlzprefix }}-sandbox-owners'].objectId" --output tsv)
              if [[ -z $group ]] ;
              then
                  graphURI=$(az cloud show --query endpoints.microsoftGraphResourceId --output tsv)
                  group=$(az rest --method post \
                      --url "${graphURI}beta/groups" \
                      --headers "{\"content-type\":\"application/json\"}" \
                      --body "{   \"description\": \"Members have Owner rights at sandbox MG\", 
                                  \"displayName\": \"${{ steps.setvariables.outputs.entlzprefix }}-sandbox-owners\", 
                                  \"isAssignableToRole\": \"false\", 
                                  \"mailNickname\": \"${{ steps.setvariables.outputs.entlzprefix }}-sandbox-owners\",
                                  \"mailEnabled\": \"false\",
                                  \"securityEnabled\": \"true\",
                                  \"visibility\": \"Private\"
                              }" \
                      --query id \
                      --output tsv)
              else
                  echo "${{ steps.setvariables.outputs.entlzprefix }}-sandbox-owners group already exists"
              fi;
              sleep 15

              az role assignment create --assignee $group --scope /providers/Microsoft.Management/managementGroups/${{ steps.setvariables.outputs.entlzprefix }}-sandboxes --role "Owner"

        - name: Deploy Custom RBAC Definitions
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              entlzprefix=${{ steps.setvariables.outputs.entlzprefix }}
              
              # Deploy Custom RBAC Definitions
              for f in $(find templates/entlz/rbac/roles -name role.json); 
                do  \
                    rolename=$(jq -r .Name $f)
                    roleexists=$(az role definition list --query "[?roleName=='$rolename']" --output tsv) 
                    if [[ -z $roleexists ]];
                    then
                      roledefinition=$(jq -r . $f | sed -e "s/%%rbacdefinitionmg%%/$entlzprefix/g")
                      az role definition create --role-definition "$roledefinition"                    
                    else
                      echo "Role definition $rolename already exists...skipping."
                    fi;
              done
              sleep 60

        - name: Deploy RBAC Assignments
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy RBAC Assignments
              for f in $(find templates/entlz/rbac/roles -name assign.*.json);
                do assignee=`jq -r .ObjectId $f`                    
                  role=`jq -r .RoleDefinitionName $f`
                  scope=`jq -r .Scope $f`
                  
                  isGroup=$(az ad group list --query "[?objectId=='$assignee']")
                  isUser=$(az ad user list --query "[?objectId=='$assignee']")
                  isApp=$(az ad app list --query "[?objectId=='$assignee']")

                  if [[ -z $isGroup &&  -z $isUser &&  -z $isApp ]]; 
                    then echo "Object ID $assignee not found in tenant."; 
                    else 
                        az role assignment create \
                        --assignee "$assignee" \
                        --role "$role" \
                        --scope "$scope"
                  fi
                                   
                done
                sleep 120


        