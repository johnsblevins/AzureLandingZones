name: entlz-5-platform-rbac

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      entlzprefix: 
        description: 'entlzprefix'
        required: true
        default: ''
      environment: 
        description: 'environment'
        required: true
        default: 'azureusgovernment'
      githubsecret:
        description: 'Github Secret Name with Azure Credentials'
        required: true
        default: 'AZGOV_CREDS'


  
  # Allows you to run this workflow with web call to GitHub Repository Dispatch Event
  # Note: This event will only trigger a workflow run if the workflow file is on the default branch.
  # Sample webhook call:
  #curl \
  #  -X POST \
  #  -H "Accept: application/vnd.github.v3+json" \
  #  -H "Authorization: token replacewithgithubpattoken" \
  #  https://api.github.com/repos/johnsblevins/AzureLandingZones/dispatches \
  #  -d '{ 
  #        "event_type":"entlz-5-platform-rbac", 
  #        "client_payload":{
  #          "ref":"dev",
  #          "entlzprefix":"elz2",
  #          "environment":"azureusgovernment",
  #          "githubsecret":"AZGOV_CREDS"
  #        }        
  #      }'
  repository_dispatch:
    types: [entlz-5-platform-rbac]  

#  push:
#    branches:
#        - dev
#    paths:
#        - 'templates/entlz/rbac/**'
#        - '.github/workflows/entlz-5-platform-rbac.yml'

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
        - name: Set Variables
          id: setvariables         
          run: |
            shopt -s nocasematch
            echo ${GITHUB_EVENT_NAME} 
            if [ ${GITHUB_EVENT_NAME} == 'workflow_dispatch' ];
            then
              echo "::set-output name=ref::${GITHUB_REF##*/}"
              echo "::set-output name=entlzprefix::${{ github.event.inputs.entlzprefix }}"
              echo "::set-output name=environment::${{ github.event.inputs.environment }}"
              echo "::set-output name=githubsecret::${{ github.event.inputs.githubsecret }}"
            elif [ ${GITHUB_EVENT_NAME} == 'repository_dispatch' ];
            then
              echo "::set-output name=ref::${{ github.event.client_payload.ref }}"
              echo "::set-output name=entlzprefix::${{ github.event.client_payload.entlzprefix }}"
              echo "::set-output name=environment::${{ github.event.client_payload.environment }}"
              echo "::set-output name=githubsecret::${{ github.event.client_payload.githubsecret }}"
            else
              echo "Invalid Event Trigger ${GITHUB_EVENT_NAME} unable to set variables."
            fi;            
          
        - name: Echo Variables
          run: |
            echo ref: ${{ steps.setvariables.outputs.ref }}
            echo entlzprefix: ${{ steps.setvariables.outputs.entlzprefix }}
            echo environment: ${{ steps.setvariables.outputs.environment }}
            echo githubsecret: ${{ steps.setvariables.outputs.githubsecret }}
        - uses: actions/checkout@v2
          with:
            ref: ${{ steps.setvariables.outputs.ref }}
        - name: Log in with Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets[steps.setvariables.outputs.githubsecret] }}
            environment: ${{ steps.setvariables.outputs.environment }}
            enable-AzPSSession: false
        
        - name: Deploy Custom RBAC Definitions
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              entlzprefix=${{ steps.setvariables.outputs.entlzprefix }}
              
              # Deploy Custom RBAC Definitions
              for f in $(find templates/entlz/rbac/roles -name role.json); 
                do  \
                    rolename=$(jq -r .Name $f)
                    roleexists=$(az role definition list --query "[?roleName=='$rolename']" --output tsv) 
                    if [[ -z $roleexists ]];
                    then
                      echo "The '${rolename}' role doesn't exist...creating it."
                      roledefinition=$(jq -r . $f | sed -e "s/%%entlzprefix%%/$entlzprefix/g")
                      az role definition create --role-definition "$roledefinition"                    
                    else
                      echo "The '${rolename}' role already exists...skipping role creation."
                    fi;
              done
              sleep 60

        - name: Deploy RBAC Assignments
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              entlzprefix=${{ steps.setvariables.outputs.entlzprefix }}

              # Deploy RBAC Assignments
              for f in $(find templates/entlz/rbac/roles -name assign.*.json);
                do \
                    displayname=$(jq -r .DisplayName $f | sed -e "s/%%entlzprefix%%/$entlzprefix/g")
                    role=$(jq -r .RoleDefinitionName $f)
                    scope=$(jq -r .Scope $f | sed -e "s/%%entlzprefix%%/$entlzprefix/g")
                    
                    groupobjid=$(az ad group list --query "[?displayName=='$displayname'].objectId" --output tsv)
                    
                    if [[ -z $groupobjid ]]; 
                      then 
                        echo "The ${displayname} Group does not exist...creating."; 
                        groupobjid=$(az ad group create --display-name $displayname --mail-nickname $displayname --query objectId --output tsv )
                      else echo "The ${displayname} Group already exists...skipping creation."
                    fi

                    assignmentid=$(az role assignment list --scope $scope --query "[?principalId=='$groupobjid'&&roleDefinitionName=='$role'].id" --output tsv)
                    if [[ -z $assignmentid ]];
                      then
                        sleep 5 # Give some time for Group Creation to Complete before Assignment
                        echo "The assignment of '${role}' role to '${displayname}' group at '${scope}' scope doesn't exist...creating assignment."
                        az role assignment create \
                        --assignee $groupobjid \
                        --role "$role" \
                        --scope $scope
                      else echo "The assignment of '${role}' role to '${displayname}' group at '${scope}' scope already exists...skipping creation."
                    fi                                   
                done
                sleep 30


        