name: entlz-4-platform-policies


# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      entlzprefix: 
        description: 'entlzprefix'
        required: true
        default: ''
      environment: 
        description: 'environment'
        required: true
        default: 'azureusgovernment'
      location: 
        description: 'location'
        required: true
        default: 'usgovvirginia'
      githubsecret:
        description: 'Github Secret Name with Azure Credentials'
        required: true
        default: 'AZGOV_CREDS'
      managementsubid:
        description: ''
        required: true
        default: ''
      uniqueid:
        description: ''
        required: false
        default: ''      
  
   # Allows you to run this workflow with web call to GitHub Repository Dispatch Event
  # Note: This event will only trigger a workflow run if the workflow file is on the default branch.
  # Sample webhook call:
  #curl \
  #  -X POST \
  #  -H "Accept: application/vnd.github.v3+json" \
  #  -H "Authorization: token replacewithgithubpattoken" \
  #  https://api.github.com/repos/johnsblevins/AzureLandingZones/dispatches \
  #  -d '{ 
  #        "event_type":"entlz-4-platform-policies", 
  #        "client_payload":{
  #          "ref":"dev",
  #          "entlzprefix":"elz2",
  #          "environment":"azureusgovernment",
  #          "location":"usgovvirginia",
  #          "githubsecret":"AZGOV_CREDS",
  #          "managementsubid":"07526f72-6689-42be-945f-bb6ad0214b71",
  #          "uniqueid":"1"
  #        }        
  #      }'
  repository_dispatch:
    types: [entlz-4-platform-policies]    

#  push:
#    branches:
#      - dev
#    paths:
#      - 'templates/entlz/policies/**'
#      - '.github/workflows/entlz-4-platform-policies.yml'

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest        
          
        steps:
        - name: Set Variables
          id: setvariables         
          run: |
            shopt -s nocasematch
            echo ${GITHUB_EVENT_NAME} 
            if [ ${GITHUB_EVENT_NAME} == 'workflow_dispatch' ];
            then
              echo "::set-output name=ref::${GITHUB_REF##*/}"
              echo "::set-output name=entlzprefix::${{ github.event.inputs.entlzprefix }}"
              echo "::set-output name=environment::${{ github.event.inputs.environment }}"
              echo "::set-output name=location::${{ github.event.inputs.location }}"
              echo "::set-output name=githubsecret::${{ github.event.inputs.githubsecret }}"
              echo "::set-output name=managementsubid::${{ github.event.inputs.managementsubid }}"
              echo "::set-output name=uniqueid::${{ github.event.inputs.uniqueid }}"
            elif [ ${GITHUB_EVENT_NAME} == 'repository_dispatch' ];
            then
              echo "::set-output name=ref::${{ github.event.client_payload.ref }}"
              echo "::set-output name=entlzprefix::${{ github.event.client_payload.entlzprefix }}"
              echo "::set-output name=environment::${{ github.event.client_payload.environment }}"
              echo "::set-output name=location::${{ github.event.client_payload.location }}"
              echo "::set-output name=githubsecret::${{ github.event.client_payload.githubsecret }}"
              echo "::set-output name=managementsubid::${{ github.event.client_payload.managementsubid }}"
              echo "::set-output name=uniqueid::${{ github.event.client_payload.uniqueid }}"
            else
              echo "Invalid Event Trigger ${GITHUB_EVENT_NAME} unable to set variables."
            fi;            
          
        - name: Echo Variables
          run: |
            echo ref: ${{ steps.setvariables.outputs.ref }}
            echo entlzprefix: ${{ steps.setvariables.outputs.entlzprefix }}
            echo environment: ${{ steps.setvariables.outputs.environment }}
            echo location: ${{ steps.setvariables.outputs.location }}
            echo githubsecret: ${{ steps.setvariables.outputs.githubsecret }}
            echo managementsubid: ${{ steps.setvariables.outputs.managementsubid }}
            echo uniqueid: ${{ steps.setvariables.outputs.uniqueid }}

        - uses: actions/checkout@v2
          with:
            ref: ${{ steps.setvariables.outputs.ref }}
        - name: Log in with Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets[steps.setvariables.outputs.githubsecret] }}
            environment: ${{ steps.setvariables.outputs.environment }}
            enable-AzPSSession: false
        
        - name: Deploy Policy Definitions
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Policy Definitions
              for f in $(find templates/entlz/policies/policies -name policy.json); 
                do  az policy definition create \
                      --name "`jq -r .name $f`" \
                      --description "`jq -r .properties.description $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --rules "`jq -r .properties.policyRule $f`" \
                      --params "`jq -r .properties.parameters $f`" \
                      --management-group ${{ steps.setvariables.outputs.entlzprefix }} \
                      --mode "`jq -r .properties.mode $f`"
              done
              sleep 60

        - name: Deploy Initiative Definitions
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Initiative Definitions
              for f in $(find templates/entlz/policies/initiatives -name policyset.json);
                do  az policy set-definition create \
                      --name "`jq -r .name $f`" \
                      --description "`jq -r .properties.description $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --definitions "`jq -r .properties.policyDefinitions $f | sed -e 's/%%entlzprefix%%/${{ steps.setvariables.outputs.entlzprefix }}/g'`" \
                      --params "`jq -r .properties.parameters $f`" \
                      --management-group ${{ steps.setvariables.outputs.entlzprefix }}
              done
              sleep 60

        - name: Deploy Policy Assignments
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Policy Assignments
              for f in $(find templates/entlz/policies/policies -name assign.*.json);
                do policy=`jq -r .properties.policyDefinitionId $f | \
                    sed -e 's/%%entlzprefix%%/${{ steps.setvariables.outputs.entlzprefix }}/g'`
                  params=`jq -r .properties.parameters $f | \
                    sed -e 's/%%entlzprefix%%/${{ steps.setvariables.outputs.entlzprefix }}/g' | \
                    sed -e 's/%%location%%/${{ steps.setvariables.outputs.location }}/g' | \
                    sed -e 's/%%managementsubid%%/${{ steps.setvariables.outputs.managementsubid }}/g' | \
                    sed -e 's/%%uniqueid%%/${{ steps.setvariables.outputs.uniqueid }}/g'`
                  scope=`jq -r .properties.scope $f | \
                    sed -e 's/%%entlzprefix%%/${{ steps.setvariables.outputs.entlzprefix }}/g' `
                  identity=`jq -r .identity $f`
                  role=`jq -r .identity.role $f`
                  [[ -z $role ]] && role="Contributor"
                  echo "Creating Policy Assignment $name"
                  if [[ $identity = "null" ]];
                  then
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ steps.setvariables.outputs.location }}" \
                      --policy "$policy" \
                      --params "$params" \
                      --scope "$scope"  \
                      --sku "`jq -r .sku.tier $f`";
                  else
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ steps.setvariables.outputs.location }}" \
                      --policy "$policy" \
                      --params "$params"  \
                      --scope "$scope"  \
                      --sku "`jq -r .sku.tier $f`"  \
                      --assign-identity \
                      --identity-scope "$scope" \
                      --role "$role";
                  fi;
              done
              sleep 60

        - name: Deploy Initiative Assignments
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Initiative Assignments
              for f in $(find templates/entlz/policies/initiatives -name assign.*.json);
                do policySetDefinition=`jq -r .properties.policyDefinitionId $f | \
                    sed -e 's/%%entlzprefix%%/${{ steps.setvariables.outputs.entlzprefix }}/g'`
                  params=`jq -r .properties.parameters $f | \
                    sed -e 's/%%entlzprefix%%/${{ steps.setvariables.outputs.entlzprefix }}/g' | \
                    sed -e 's/%%location%%/${{ steps.setvariables.outputs.location }}/g' | \
                    sed -e 's/%%managementsubid%%/${{ steps.setvariables.outputs.managementsubid }}/g' | \
                    sed -e 's/%%uniqueid%%/${{ steps.setvariables.outputs.uniqueid }}/g'`
                  scope=`jq -r .properties.scope $f | \
                    sed -e 's/%%entlzprefix%%/${{ steps.setvariables.outputs.entlzprefix }}/g'`
                  identity=`jq -r .identity $f`
                  role=`jq -r .identity.role $f`
                  [[ -z $role ]] && role="Contributor"
                  echo "Creating Initiative Assignment $name"
                  if [[ $identity = "null" ]];
                  then
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ steps.setvariables.outputs.location }}" \
                      --policy-set-definition "$policySetDefinition" \
                      --params "$params" \
                      --scope "$scope" \
                      --sku "`jq -r .sku.tier $f`";
                  else
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ steps.setvariables.outputs.location }}" \
                      --policy-set-definition "$policySetDefinition" \
                      --params "$params" \
                      --scope "$scope" \
                      --sku "`jq -r .sku.tier $f`" \
                      --assign-identity \
                      --identity-scope "$scope" \
                      --role "$role";
                  fi;
                done
                sleep 120

#        - name: Remediate Policies on Platform Subs 
#          uses: azure/CLI@v1
#          with:
#            azcliversion: 2.21.0
#            inlineScript: |
#              az policy remediation create --name Deploy-AzActivity-Log --policy-assignment Deploy-AzActivity-Log --resource-discovery-mode ReEvaluateCompliance
#              az policy remediation create --name Deploy-Resource-Diag --policy-assignment Deploy-Resource-Diag --resource-discovery-mode ReEvaluateCompliance