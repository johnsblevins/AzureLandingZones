name: entlz-4-platform-policies

env:
  entlzprefix: entlz
  environment: azureusgovernment
  location: usgovvirginia
  managementsubid: 
  uniqueid: "1"

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
#  push:
#    branches:
#      - dev
#    paths:
#      - 'templates/entlz/policies/**'
#      - '.github/workflows/entlz-4-platform-policies.yml'

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest        
          
        steps:
        - uses: actions/checkout@v2
        - name: Branch name
          run: echo running on branch ${GITHUB_REF##*/}
        - name: Log in with Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZGOV_CREDS }}
            environment: ${{ env.environment }}
            enable-AzPSSession: false
        
        - name: Deploy Policy Definitions
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Policy Definitions
              for f in $(find templates/entlz/policies/policies -name policy.json); 
                do  az policy definition create \
                      --name "`jq -r .name $f`" \
                      --description "`jq -r .properties.description $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --rules "`jq -r .properties.policyRule $f`" \
                      --params "`jq -r .properties.parameters $f`" \
                      --management-group ${{ env.entlzprefix }} \
                      --mode "`jq -r .properties.mode $f`"
              done
              sleep 60

        - name: Deploy Initiative Definitions
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Initiative Definitions
              for f in $(find templates/entlz/policies/initiatives -name policyset.json);
                do  az policy set-definition create \
                      --name "`jq -r .name $f`" \
                      --description "`jq -r .properties.description $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --definitions "`jq -r .properties.policyDefinitions $f | sed -e 's/%%entlzprefix%%/${{ env.entlzprefix }}/g'`" \
                      --params "`jq -r .properties.parameters $f`" \
                      --management-group ${{ env.entlzprefix }}
              done
              sleep 60

        - name: Deploy Policy Assignments
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Policy Assignments
              for f in $(find templates/entlz/policies/policies -name assign.*.json);
                do policy=`jq -r .properties.policyDefinitionId $f | \
                    sed -e 's/%%entlzprefix%%/${{ env.entlzprefix }}/g'`
                  params=`jq -r .properties.parameters $f | \
                    sed -e 's/%%entlzprefix%%/${{ env.entlzprefix }}/g' | \
                    sed -e 's/%%location%%/${{ env.location }}/g' | \
                    sed -e 's/%%managementsubid%%/${{ env.managementsubid }}/g' | \
                    sed -e 's/%%uniqueid%%/${{ env.uniqueid }}/g'`
                  scope=`jq -r .properties.scope $f | \
                    sed -e 's/%%entlzprefix%%/${{ env.entlzprefix }}/g' `
                  identity=`jq -r .identity $f`
                  role=`jq -r .identity.role $f`
                  [[ -z $role ]] && role="Contributor"
                  echo "Creating Policy Assignment $name"
                  if [[ $identity = "null" ]];
                  then
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ env.location }}" \
                      --policy "$policy" \
                      --params "$params" \
                      --scope "$scope"  \
                      --sku "`jq -r .sku.tier $f`";
                  else
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ env.location }}" \
                      --policy "$policy" \
                      --params "$params"  \
                      --scope "$scope"  \
                      --sku "`jq -r .sku.tier $f`"  \
                      --assign-identity \
                      --identity-scope "$scope" \
                      --role "$role";
                  fi;
              done
              sleep 60

        - name: Deploy Initiative Assignments
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              # Deploy Initiative Assignments
              for f in $(find templates/entlz/policies/initiatives -name assign.*.json);
                do policySetDefinition=`jq -r .properties.policyDefinitionId $f | \
                    sed -e 's/%%entlzprefix%%/${{ env.entlzprefix }}/g'`
                  params=`jq -r .properties.parameters $f | \
                    sed -e 's/%%entlzprefix%%/${{ env.entlzprefix }}/g' | \
                    sed -e 's/%%location%%/${{ env.location }}/g' | \
                    sed -e 's/%%managementsubid%%/${{ env.managementsubid }}/g' | \
                    sed -e 's/%%uniqueid%%/${{ env.uniqueid }}/g'`
                  scope=`jq -r .properties.scope $f | \
                    sed -e 's/%%entlzprefix%%/${{ env.entlzprefix }}/g'`
                  identity=`jq -r .identity $f`
                  role=`jq -r .identity.role $f`
                  [[ -z $role ]] && role="Contributor"
                  echo "Creating Initiative Assignment $name"
                  if [[ $identity = "null" ]];
                  then
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ env.location }}" \
                      --policy-set-definition "$policySetDefinition" \
                      --params "$params" \
                      --scope "$scope" \
                      --sku "`jq -r .sku.tier $f`";
                  else
                    az policy assignment create \
                      --name "`jq -r .name $f`" \
                      --display-name "`jq -r .properties.displayName $f`" \
                      --location "${{ env.location }}" \
                      --policy-set-definition "$policySetDefinition" \
                      --params "$params" \
                      --scope "$scope" \
                      --sku "`jq -r .sku.tier $f`" \
                      --assign-identity \
                      --identity-scope "$scope" \
                      --role "$role";
                  fi;
                done
                sleep 120

        - name: Remediate Policies on Platform Subs 
          uses: azure/CLI@v1
          with:
            azcliversion: 2.21.0
            inlineScript: |
              az policy remediation create --name Deploy-AzActivity-Log --policy-assignment Deploy-AzActivity-Log --resource-discovery-mode ReEvaluateCompliance
              az policy remediation create --name Deploy-Resource-Diag --policy-assignment Deploy-Resource-Diag --resource-discovery-mode ReEvaluateCompliance